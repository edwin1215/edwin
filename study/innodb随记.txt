
第一章

数据库
	物理操作系统文件或其他形式文件类型的集合
实例
	真正操作操作数据库文件的
	

MySql是单进程多线程数据库


MySql的组成：
	连接池组件
	管理服务和工具组件
	SQL接口组件
	查询分析器组件
	优化器组件
	缓冲组件
	插件式存储引擎
	物理文件


存储引擎是基于表的，而不是数据库

InnoDB存储引擎支持事务，其设计目标主要面向在线事务处理(OLTP)的应用。
MyISAM,主要面向于ETL

InnoDB存储引擎的特点：
	1、行锁设计、支持外键，默认读取操作不会产生锁
	2、将数据存放在一个逻辑的表空间中，MySql4.1开始，可以将表单独存放到一个独立的ibd文件中，支持用裸设备(row disk)建立其表空间
	3、使用MVCC来获得高并发性，并实现了SQL标准的4种隔离级别，默认repeatable级别，使用next-key locking的策略来避免幻读
	4、提供了插入缓冲(insert buffer)、二次写(double write)、自适应哈希索引(adaptive hash index)、
		预读(read ahaed)等高性能、高可用的功能
	5、对于表中数据的存储，InnoDB采用了聚集(clustered)的方式，因此每张表的存储都是按主键的顺序进行存放。
		没有显示定义主键时，会生成一个6字节的ROWID作为主键。


查看MySQL数据库支持的存储引擎
SHOW ENGINES

1.5连接MySQL

	GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'youpassword' WITH GRANT OPTION;
	FLUSH PRIVILEGES;
	连接MySQL操作是一个连接进程和MySQL数据库实例进行通信，本质是进城通信。
	常用的进城通信方式：管道、命名管道、命名字、TCP/IP套接字、UNIX域套接字。
	1.5.1 TCP/IP套接字
		连接方式：
			mysql -h192.168.0.101 -u root -p
		通过TCP/IP连接到MySQL数据库时，Mysql数据库会先检查一张权限试图，来判断请求的客户端IP是否允许连接到Mysql实例。
			USE mysql;
			SELECT host,user,password FROM user;
	1.5.2 命名管道和共享内存
		在windows平台上，若果两个需要进程通信的进程在同一台服务器上，可以使用命名管道。
		命名管道的启用：--enable-named-pipe
		共享内存的启用：--shared-memory
			Mysql客户端必须使用 --protocal=memory选项
	1.5.3 UNIX域套接字
		在linux和UNIX环境下，还可以使用UNIX域套接字
			mysql -u root -p -S /var/lib/mysql/mysql.sock


第二章
	InnoDB体系架构
		内存池：
			1、维护所有进程/线程需要访问的多个内部数据结构
			2、缓存磁盘上的数据，方便快速地读取，同时在对磁盘文件的数据修改之前在这里缓存
			3、重做日志(redo log)缓冲
		后台线程：
			主要作用是负责刷新内存池中的数据，保证缓冲池中的内存缓冲的是最近的数据。
			将已修改的数据文件刷新到磁盘文件，同时保证在数据库发生异常的情况下InnoDB能恢复到正常运行状态
			1、Master Thread
				脏页的刷新()
				合并插入缓冲
				UNDO页的回收(innoDB1.1开始可以独立到purge thread中)
			2、IO Thread
				SHOW variables like 'innodb_version';
				SHOW variables like 'innodb_%io_threads';
				SHOW engine innodb status;
				1、insert buffer thread
				2、log thread
				3、read thread
				4、write thread
				注：读线程的ID总是小于写线程
				参数：
					innodb_read_io_threads
					innodb_write_io_threads
			3、Purge Thread
				回收已经使用并分配的undo页。
				启用独立的Purge Thread：innodb_purge_threads=1
				1.1版本只能为1,1.2开始支持多个Purge Thread
					show variables like 'innodb_purge_threads';
			4、Page Claener Thread
				1.2版本中引入的，将脏页刷新操作都放入到单独的线程中来完成，减轻Master线程的工作，提高存储引擎的性能。
		内存：
			1、缓冲池
				innodb引擎是基于磁盘存储的，其中的记录按照页的方式进行管理。因此可将其视为基于磁盘的数据库系统(Disk-base Database)。
				磁盘数据库系统通常使用缓冲池技术来提高数据库的整体性能。
				缓冲池简单来说就是一块内存区域，通过内存的速度来弥补磁盘速度较慢对数据库性能的影响。
				读取：
					先将从磁盘读到的页存放在缓冲池中，这个过程叫：将页FIX在缓冲池中(固定)。
				修改：
					对数据库中页的修改，首先修改在缓冲池中的页，然后再以一定的频率刷新到磁盘上
					checkpoint的机制刷新回磁盘
				参数：
					缓冲池大小：innodb_buffer_pool_size=16106127360，单位Byte
					设置缓冲池实例个数：innodb_buffer_pool_instances=1，默认1
				数据页类型：
					索引页、数据页、undo页、插入缓冲、自适应哈希索引、innodb存储的锁信息、数据字典信息等

			2、LRU List、Free List和Flush List
				LRU(Latest Recent Used,最近最少使用)：
					通常来说，数据库中的缓冲池是通过LRU算法来进行管理的。
					缓冲池中页的大小默认为16KB，不同于传统的LRU算法，加入了midpoint
					midpoint之后的列表成为old列表，之前的称为new列表
					参数：
						innodb_old_blocks_pct=37，old列表占比，默认37%
						innodb_old_blocks_time=1000，
					
					通过INNODB_BUFFER_POOL_STATS观察缓冲池的运行状态
					通过INNODB_BUFFER_PAGE_LRU观察每个LRU列表的具体信息
					
					
					INNODB从1.0x版本开始开始支持压缩页的功能，将16KB的页压缩为1KB、2KB、4KB、8KB。
					压缩页是通过unzip_LRU列表进行管理的，LRU列表的页包含了unzip_LRU列表中的页
					unzip_LRU分配内存方式：
						1、在unzip_LRU列表中对不同压缩页大小的页进行分别管理
						2、通过伙伴算法进行内存分配。
							如：需要从缓冲池中申请页为4KB的大小：
								1、检查4KB的unzip_LRU列表，检查是否有可用的空闲页
								2、若有，则直接使用
								3、若无、检查8KB的unzip_LRU列表
								4、若能得到空闲页，将页分成2个4KB页，存放到4KB的unzip_LRU列表
								5、若不能得到空闲页，从LRU列表中申请一个16KB的页，将页分成1个8KB、2个4KB的页，分别存放到对应的unzip_LRU列表中。

					LRU列表中的页被修改后，称为脏页(dirty page)，缓冲池和磁盘的页数据不一致，通过CHECKPOINT机制刷新回磁盘
					Flush列表中的页即为脏页列表

			3、重做日志缓冲
				



第三章
	1、参数文件
	2、日志文件
		(1)错误日志
			show variables like 'log_error'\G;
		(2)慢查询日志
			long_query_time					默认：10.000000精确到微妙	慢查询日志阈值		
			log_slow_queries				默认：空，开启ON			是否开启慢查询日志	
				5.6之后：slow_query_log=ON、slow_query_log_file=/var/log/xxx-slow.log
			log_queries_not_using_indexes	开启ON						如果SQL语句没有使用索引，是否记录慢查询日志
			log_throttle_queries_not_using_indexes	默认0，没有限制		每分钟允许记录到slow log的未使用索引的SQL语句次数

			mysqldumpslow -s al -n 100 bogon-slow.log，查询执行时间最长的100条SQL语句
			还可以通过mysql.slow_log查询
				log_output：(动态、全局的)指定慢查询输出格式，默认FILE，将它设为TABLE然后就可以查询mysql架构下的slow_table表了

		(3)查询日志
		(4)二进制日志
			
			
第五章
	1、InnoDB支持索引
		B+树索引
		全文索引
		哈希索引
	2、数据结构与算法
		(1)二分查找法
		(2)AVL树
			任意两个子树的高度差最大为1
			构建AVL树
				插入节点后，高度差为2，这时，高度小的节点A，高度大的节点B
				1、左旋、右旋：从左向右(与目标节点为左边的节点交换)、从右向左旋转(与目标节点为右边的节点交换)
				2、失衡点：离叶子节点最近的公共节点
				3、从失衡点开始向B查找，下两次路径
					左左：失衡点左旋
					右右：失衡点右旋
					左右：失衡点下一节点右旋、失衡点左旋
					右左：失衡点下一节点左旋、失衡点右旋
		(3)B+树
			每页存放N条记录，扇出为N+1，前闭后开
			叶子结点双向链表
			a、插入
				LeafPage满		IndexPage满		操作
				NO				NO				直接插入
				YES				NO				1)拆分LeafPage，将中间的节点放到IndexPage中
												2)小于中间节点的记录放左边，大于等于中间节点的放右边
				YES				YES				1)拆分LeafPage，将中间的节点放到IndexPage中
												2)小于中间节点的记录放左边，大于等于中间节点的放右边
												3)拆分IndexPage，将中间的节点提到上一层IndexPage中
												4)小于中间节点的记录放左边，大于中间节点的放右边
				为了减少拆分页(split)操作，优先使用Rotation旋转操作，左节点首先检查
			b、删除
				填充因子(fill factor)












								

JVM原理



Class文件结构

两种数据类型(类似于C语言结构体的伪结构)
	无符号数：u1、u2、u4、u8代表1byte、2byte、4byte、8byte
	表：由多个无符号数或者其他表作为数据项构成复合数据结构，所有表习惯以.info结尾


1、魔数（Magic Number）、次版本（Minor Version）、主版本（Major Version）
2、常量池（Constant Pool）
	a、字面量(Literal)：如文本字符串、常量值(final)
	b、符号引用(Symbolic References)
		类和接口的全限定名(Fully Qualified Name)
		字段的名称和描述符(Descriptor)
		方法的名称和描述符(Descriptor)
	
	14种表结构
	javap -v xxx.class //查看字节码内容
	如：CONSTANT_Utf8_info
	
3、访问标志（access_flags）
	class or interface
	public private protected default
	是否abstract
	是否final
	
	如：ACC_PUBLIC

4、类索引、父类索引与接口索引集合
	类索引：	this_class		u2
	父类索引：	super_class		u2
	接口索引：	interfaces		u2集合	入口第一项：u2的接口计数器(interfaces_count)

5、字段表集合（field_info）
	描述类中的变量：类变量、实例变量
	描述信息：
		作用域(public、private...)			boolean
		实例or类变量(static)				boolean
		可变性(final)						boolean
		并发可见性(volatile)				boolean
		可否被序列化(transient)				boolean
		数据类型(基本类型、对象、数组)		引用常量池中的常量
		字段名称							引用常量池中的常量
	
	结构：
		u2					access_flags			访问标志（类似class中的访问标志）
		u2					name_index				简单名称
		u2					descriptor_index		方法描述符
		u2					attributes_count		
		attribute_info		attributes				attributes_count个

	简单名称：main() -> main，int m -> m
	描述符：描述字段的数据类型、方法参数、返回值
		如：[[Ljava/lang/String  -> String[][]
	全限定名：com.edwin.test -> com/edwin/test;
	
6、方法表集合（method_info）
	基本同上
	access_flags有区别
		减少：volatile、transient
		增加：synchronized、native、strictfp、abstract

7、属性表集合（attribute_info）
	1）Code属性（方法体中的代码）
		attribute_name_index		Code
		attribute_length			属性值的长度
		max_statck					操作数栈最大深度
		max_locals					局部变量表存储空间（单位是Slot，1Slot = 32Bit = 4Byte）
		code_length					源程序编译成字节码后长度
		code						字节码
		
	2）Exception属性
		记录受查异常
	3）LineNumberTable属性
		源码行号和字节码行号(偏移量)对应关系
	4）LocalVariableTable属性
		描述栈帧中局部变量表中的变量和java源码中定义的变量之间的关系
	5）SourceFile属性
		记录Class文件的源码文件名称（关闭时打印堆栈信息时不显示类名）
	6）ConstantValue属性
		通知虚拟机自动为static变量赋值（包括但不仅仅是final）
	7）InnerClasses属性
		记录内部类和宿主类的关联
	8）Deprecated及Synthetic属性
		不推荐使用、非java源码产生而是由编译器自行添加的
	9）StackMapTable属性
		
	10）Signature属性
		
	11）BootstrapMethods属性
		

类的加载过程

1、加载load
	a、通过一个类的全限定名来获取定义此类的二进制字节流
	b、将二进制字节流所代表的静态存储结构转化为方法区的运行时数据结构
	c、在内存中生成java.lang.Class对象，作为方法区类的各种数据的访问入口
2、验证
	a、文件格式验证
	b、元数据验证
	c、字节码验证
	d、符号引用验证
3、准备
	为类变量在方法区分配内存并设置其初始值(零值)
	如果类变量的字段属性表中存在ConstantValue属性(final)，初始化为指定值
4、解析
	将常量池中的符号引用替换为直接引用
		符号引用(Symbolic References)：
		直接引用(Direct References)：
5、初始化
	编译器自动生成<clinit>方法：
		a、类变量赋值、静态语句块
		b、虚拟机优先执行父类的<clinit>方法
		c、不是必须，如果没有类变量、静态代码块则编译器不会生成<clinit>方法
		d、接口的<clinit>方法不必须调用父类的<clinit>方法，只有父接口有类变量时，父接口才会初始化
		e、<clinit>方法只会被调用一次，多线程下虚拟机会保证<clinit>方法的线程安全，其他线程阻塞

类加载器

1、启动类加载器（Bootstrap ClassLoader）
	用于加载<JAVA_HOME>\lib目录、或者-Xbootclasspath参数指定的路径下，虚拟机识别的类库；
	HotSpot虚拟机是用C++实现的
2、扩展类加载器（Extension ClassLoader）
	用于加载<JAVA_HOME>\lib\ext目录、或者java.ext.dirs系统变量所指定的路径下的所有类库
3、应用程序类加载器（Application ClassLoader）
	用户加载用户路径（ClassPath）下的类库
	ClassLoader中getSystemClassLoader()获取，又称系统类加载器

双亲委派机制















